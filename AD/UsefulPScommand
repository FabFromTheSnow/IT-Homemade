#Load AD module
Import-Module ActiveDirectory  #FIRST THING TO DO

#Check for locked up account
Search-ADAccount -LockedOut | Get-ADUser -Properties * | Select-Object Name, SamAccountName, LockedOut, lockoutTime, LastBadPasswordAttempt

#Check for a specific security event ID from powershell
Get-EventLog -LogName Security | Where-Object { $_.EventID -eq 4624}

#Check for failed login attempt and counti
$events = Get-EventLog -LogName Security -After (Get-Date).AddDays(-14) | Where-Object { $_.EventID -eq 4625 }

$eventsGrouped = $events | Group-Object -Property { $_.ReplacementStrings[5..7] -join ' ' } | ForEach-Object {
    $userEvents = $_.Group | Sort-Object -Property TimeGenerated
    $trialCount = $userEvents.Count
    [PSCustomObject]@{
        UserName         = $_.Name
        FailedLoginCount = $trialCount
    }
}

$eventsGrouped


#Check for users with admin rights
Get-ADGroupMember "Domain Admins" | Select-Object Name, SamAccountName
Get-ADGroupMember "Enterprise Admins" | Select-Object Name, SamAccountName

$computers = Get-ADComputer -Filter *
foreach ($computer in $computers) {
    $admins = Invoke-Command -ComputerName $computer.Name -ScriptBlock {
        $localAdmins = Get-LocalGroupMember -Group "Administrators" | Where-Object {$_.ObjectClass -eq 'User'}
        $localAdmins | Select-Object Name, PrincipalSource
    }
    if ($admins -ne $null) {
        Write-Host "Local admins on $($computer.Name):"
        $admins
    }
}

#Set delete protection on an OU
Get-ADObject -Identity 'OU=Domain Controllers,DC=gift,DC=sa' | Set-ADObject -ProtectedFromAccidentalDeletion:$true

#copy groups from one to another
Get-ADUser -Identity "usersource" -Properties memberOf | Select-Object -ExpandProperty memberOf | Add-ADGroupMember -Members "usercible"